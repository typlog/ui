{
  "props": [
    {
      "name": "as",
      "description": "<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>",
      "type": "AsTag | Component",
      "required": false,
      "default": "\"div\""
    },
    {
      "name": "asChild",
      "description": "<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\"https://www.reka-ui.com/docs/guides/composition\">Composition</a> guide for more details.</p>",
      "type": "boolean",
      "required": false
    },
    {
      "name": "color",
      "description": "<p>Overrides the accent color inherited from the Theme.</p>",
      "type": "\"indigo\" | \"gray\" | \"gold\" | \"bronze\" | \"brown\" | \"yellow\" | \"amber\" | \"orange\" | \"tomato\" | \"red\" | \"ruby\" | \"crimson\" | \"pink\" | \"plum\" | \"purple\" | \"violet\" | \"iris\" | \"blue\" | \"cyan\" | \"teal\" | \"jade\" | \"green\" | \"grass\" | \"lime\" | \"mint\" | \"sky\"",
      "required": false
    },
    {
      "name": "defaultValue",
      "description": "<p>The default active value of the item(s).</p>\n<p>Use when you do not need to control the state of the item(s).</p>",
      "type": "AcceptableValue | AcceptableValue[]",
      "required": false
    },
    {
      "name": "dir",
      "description": "<p>The reading direction of the combobox when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>",
      "type": "\"ltr\" | \"rtl\"",
      "required": false
    },
    {
      "name": "disabled",
      "description": "<p>When <code>true</code>, prevents the user from interacting with the toggle group and all its items.</p>",
      "type": "boolean",
      "required": false
    },
    {
      "name": "highContrast",
      "description": "<p>Uses a higher contrast color for the component.</p>",
      "type": "boolean",
      "required": false
    },
    {
      "name": "loop",
      "description": "<p>When <code>loop</code> and <code>rovingFocus</code> is <code>true</code>, keyboard navigation will loop from last item to first, and vice versa.</p>",
      "type": "boolean",
      "required": false
    },
    {
      "name": "modelValue",
      "description": "<p>The controlled value of the active item(s).</p>\n<p>Use this when you need to control the state of the items. Can be binded with <code>v-model</code></p>",
      "type": "AcceptableValue | AcceptableValue[]",
      "required": false
    },
    {
      "name": "name",
      "description": "<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>",
      "type": "string",
      "required": false
    },
    {
      "name": "orientation",
      "description": "<p>The orientation of the component, which determines how focus moves: <code>horizontal</code> for left/right arrows and <code>vertical</code> for up/down arrows.</p>",
      "type": "\"vertical\" | \"horizontal\"",
      "required": false
    },
    {
      "name": "radius",
      "description": "<p>Overrides the radius inherited from the theme.</p>",
      "type": "\"none\" | \"small\" | \"medium\" | \"large\" | \"full\"",
      "required": false
    },
    {
      "name": "required",
      "description": "<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>",
      "type": "boolean",
      "required": false
    },
    {
      "name": "rovingFocus",
      "description": "<p>When <code>false</code>, navigating through the items using arrow keys will be disabled.</p>",
      "type": "boolean",
      "required": false
    },
    {
      "name": "size",
      "description": "<p>Control the size of the toggle.</p>",
      "type": "\"1\" | \"2\" | \"3\"",
      "required": false,
      "default": "\"2\""
    },
    {
      "name": "type",
      "description": "<p>Determines whether a &quot;single&quot; or &quot;multiple&quot; items can be selected at a time.</p>\n<p>This prop will overwrite the inferred type from <code>modelValue</code> and <code>defaultValue</code>.</p>",
      "type": "\"single\" | \"multiple\"",
      "required": false
    },
    {
      "name": "variant",
      "description": "<p>The visual variant to apply.</p>",
      "type": "\"solid\" | \"soft\" | \"ghost\"",
      "required": false,
      "default": "\"soft\""
    }
  ],
  "events": [
    {
      "name": "update:modelValue",
      "type": "[payload: AcceptableValue | AcceptableValue[]]"
    }
  ],
  "slots": [],
  "methods": []
}